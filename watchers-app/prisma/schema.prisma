// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  userId            String        @id @default(cuid())
  username          String        @unique
  email             String        @unique
  passwordHash      String
  uniqueUserAuthKey String
  displayName       String?
  posts             Post[]
  likes             Like[]
  comments          UserComment[]
  follower          Follows[]     @relation("following")
  following         Follows[]     @relation("follower")
  // activeTokens      UserTokenData[]
}

model Post {
  postId            String   @id @default(cuid())
  author            User     @relation(fields: [authorId], references: [userId])
  authorId          String
  postBody          String
  referencedMovieId String
  rating            Int
  postLikes         Like[]
  postTime          DateTime @default(now())
}

model Like {
  likeID         String       @id @default(cuid())
  liking         User         @relation(fields: [likingUserId], references: [userId])
  likedPostId    String
  liked          Post         @relation(fields: [likedPostId], references: [postId])
  likingUserId   String
  commentLike    UserComment? @relation(fields: [likedCommentId], references: [commentId])
  likedCommentId String?      @map("commentCommentId")
}

model UserComment {
  commentId    String @id @default(cuid())
  commenter    User   @relation(fields: [commenterId], references: [userId])
  commenterId  String
  commentBody  String
  commentLikes Like[]
}

model Follows {
  follower         User   @relation("follower", fields: [followerId], references: [userId])
  followerId       String
  following        User   @relation("following", fields: [followingId], references: [userId])
  followingId      String
  // @@id([followerId, followingId])
  followRelationId String @id @default(cuid())
}
